// CERBERUS Bot - Backtest Panel Component
// Created: 2025-05-06 21:59:40 UTC
// Author: CERBERUSCHAINYes

import React, { useState } from 'react';
import { Strategy, BacktestConfig, TimeInterval, StrategyPerformance } from '../../types/strategy';
import { useStrategy } from '../../contexts/StrategyContext';
import { useTokenResearch } from '../../contexts/TokenResearchContext';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface BacktestPanelProps {
  strategy: Strategy;
  onClose: () => void;
}

export const BacktestPanel: React.FC<BacktestPanelProps> = ({ strategy, onClose }) => {
  const { runBacktest, isLoading } = useStrategy();
  const { getTokenInfo, tokens } = useTokenResearch();
  
  const [config, setConfig] = useState<BacktestConfig>({
    strategyId: strategy.id,
    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago
    endDate: new Date().toISOString().split('T')[0], // today
    initialCapital: 1000,
    tokenAddress: '',
    timeInterval: TimeInterval.HOUR_1,
    fees: {
      maker: 0.1,
      taker: 0.1,
      slippage: 0.5
    },
    stopLoss: 5,
    takeProfit: 10
  });
  
  const [results, setResults] = useState<StrategyPerformance | null>(null);
  const [selectedToken, setSelectedToken] = useState<any>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showTokenSearch, setShowTokenSearch] = useState(false);
  
  const handleSearch = async () => {
    try {
      if (searchTerm.length < 2) return;
      const results = await getTokenInfo(searchTerm);
      setSearchResults(results);
    } catch (error) {
      console.error('Error searching tokens:', error);
    }
  };
  
  const handleSelectToken = (token: any) => {
    setSelectedToken(token);
    setConfig({
      ...config,
      tokenAddress: token.address
    });
    setShowTokenSearch(false);
  };
  
  const handleRunBacktest = async () => {
    try {
      const performance = await runBacktest(config);
      setResults(performance);
    } catch (error) {
      console.error('Error running backtest:', error);
    }
  };
  
  // Format performance data for chart
  const formatChartData = (performance: StrategyPerformance | null) => {
    if (!performance?.backtestResults) return [];
    
    // This is just a placeholder - in a real app this would use actual trade data
    const startDate = new Date(config.startDate);
    const endDate = new Date(config.endDate);
    const daysBetween = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24));
    
    // Generate random data points for visualization purposes
    return Array.from({ length: daysBetween + 1 }).map((_, index) => {
      const date = new Date(startDate);
      date.setDate(date.getDate() + index);
      
      // Generate a somewhat realistic profit curve
      const dayProgress = index / daysBetween;
      const profit = config.initialCapital * (1 + (performance.backtestResults?.profitPercentage || 0) / 100 * dayProgress);
      
      return {
        date: date.toLocaleDateString(),
        profit: Math.round(profit * 100) / 100,
      };
    });
  };
  
  const chartData = formatChartData(results);
  
  return (
    <div className="h-full flex flex-col bg-gray-800">
      <div className="p-4 border-b border-gray-700 flex justify-between items-center">
        <h3 className="text-lg font-medium">Strategy Backtester</h3>
        <button
          onClick={onClose}
          className="text-gray-400 hover:text-gray-300"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div className="flex-1 overflow-y-auto">
        {/* Backtest Config Form */}
        <div className="p-4">
          <h4 className="text-md font-medium mb-4">Backtest Configuration</h4>
          
          {/* Token Selection */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-400 mb-1">Token</label>
            <div className="relative">
              {selectedToken ? (
                <div className="flex justify-between items-center bg-gray-700 border border-gray-600 rounded-md p-2">
                  <div className="flex items-center">
                    {selectedToken.logo && (
                      <img 
                        src={selectedToken.logo}
                        alt={selectedToken.symbol}
                        className="w-6 h-6 rounded-full mr-2"
                      />
                    )}
                    <div>
                      <div className="text-white">{selectedToken.name} ({selectedToken.symbol})</div>
                      <div className="text-xs text-gray-400">{selectedToken.address}</div>
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      setSelectedToken(null);
                      setConfig({...config, tokenAddress: ''});
                    }}
                    className="text-gray-400 hover:text-gray-300"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ) : (
                <div>
                  <div 
                    className="flex justify-between items-center bg-gray-700 border border-gray-600 rounded-md p-2 cursor-pointer"
                    onClick={() => setShowTokenSearch(true)}
                  >
                    <span className="text-gray-400">Select a token</span>
                    <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  
                  {showTokenSearch && (
                    <div className="absolute z-10 mt-1 w-full bg-gray-700 border border-gray-600 rounded-md shadow-lg">
                      <div className="p-2">
                        <div className="flex items-center">
                          <input<input aria-label="Input field"
                            type="text"
                            placeholder="Search for tokens..."
                            value={searchTerm}
                            onChange={(e) = aria-label="Input field" aria-label="Input field"> setSearchTerm(e.target.value)}
                            className="w-full bg-gray-800 border border-gray-600 rounded-md p-2 text-white"
                          />
                          <button 
                            onClick={handleSearch}
                            className="ml-2 px-3 py-2 bg-indigo-600 hover:bg-indigo-700 rounded"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                          </button>
                        </div>
                      </div>
                      <div className="max-h-60 overflow-y-auto">
                        {searchResults.length > 0 ? (
                          searchResults.map(token => (
                            <div
                              key={token.address}
                              className="py-2 px-3 hover:bg-gray-600 cursor-pointer flex items-center"
                              onClick={() => handleSelectToken(token)}
                            >
                              {token.logo && (
                                <img 
                                  src={token.logo}
                                  alt={token.symbol}
                                  className="w-6 h-6 rounded-full mr-2"
                                />
                              )}
                              <div>
                                <div className="text-white">{token.name} ({token.symbol})</div>
                                <div className="text-xs text-gray-400">{`${token.address.substr(0, 6)}...${token.address.substr(-4)}`}</div>
                              </div>
                            </div>
                          ))
                        ) : (
                          <div className="py-2 px-3 text-gray-400">
                            {searchTerm ? 'No tokens found' : 'Start typing to search'}
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
          
          {/* Date Range */}
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">Start Date</label>
              <input<input aria-label="Input field"
                type="date"
                value={config.startDate}
                onChange={(e) = aria-label="Input field" aria-label="Input field"> aria-label="Input field" setConfig({ ...config, startDate: e.target.value })}
                className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">End Date</label>
              <input<input aria-label="Input field"
                type="date"
                value={config.endDate}
                onChange={(e) = aria-label="Input field" aria-label="Input field"> aria-label="Input field" setConfig({ ...config, endDate: e.target.value })}
                className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white"
              />
            </div>
          </div>
          
          {/* Initial Capital */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-400 mb-1">Initial Capital (USD)</label>
            <input<input aria-label="Input field"
              type="number"
              value={config.initialCapital}
              onChange={(e) = aria-label="Input field" aria-label="Input field"> aria-label="Input field" setConfig({ ...config, initialCapital: parseFloat(e.target.value) })}
              className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white"
              min="1"
            />
          </div>
          
          {/* Timeframe */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-400 mb-1">Timeframe</label>
            <select<select aria-label="Select option"
              value={config.timeInterval}
              onChange={(e) = aria-label="Selection field" aria-label="Selection field"> aria-label="Selection field" setConfig({ ...config, timeInterval: e.target.value as TimeInterval })}
              className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white"
            >
              <option value={TimeInterval.MINUTE_1}>1 Minute</option>
              <option value={TimeInterval.MINUTE_5}>5 Minutes</option>
              <option value={TimeInterval.MINUTE_15}>15 Minutes</option>
              <option value={TimeInterval.MINUTE_30}>30 Minutes</option>
              <option value={TimeInterval.HOUR_1}>1 Hour</option>
              <option value={TimeInterval.HOUR_4}>4 Hours</option>
              <option value={TimeInterval.DAY_1}>1 Day</option>
            </select>
          </div>
          
          {/* Advanced Settings */}
          <div className="mb-4">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-gray-400">Advanced Settings</label>
              <button
                onClick={() => {
                  // Toggle display of advanced settings
                }}
                className="text-xs text-indigo-400 hover:text-indigo-300"
              >
                Show
              </button>
            </div>
          </div>
          
          <button
            onClick={handleRunBacktest}
            disabled={!selectedToken || isLoading}
            className={`w-full px-4 py-2 rounded text-white flex items-center justify-center ${
              selectedToken && !isLoading ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-gray-700 text-gray-400 cursor-not-allowed'
            }`}
          >
            {isLoading ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Running Backtest...
              </>
            ) : 'Run Backtest'}
          </button>
        </div>
        
        {/* Results Section */}
        {results && results.backtestResults && (
          <div className="p-4 border-t border-gray-700">
            <h4 className="text-md font-medium mb-4">Backtest Results</h4>
            
            {/* Results Summary */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="bg-gray-750 rounded-lg p-3">
                <div className="text-sm text-gray-400">Total Profit</div>
                <div className={`text-xl font-bold ${results.backtestResults.profitPercentage >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {results.backtestResults.profitPercentage >= 0 ? '+' : ''}
                  {results.backtestResults.profitPercentage.toFixed(2)}%
                </div>
                <div className="text-xs text-gray-500">
                  ${results.backtestResults.totalProfit.toFixed(2)} USD
                </div>
              </div>
              
              <div className="bg-gray-750 rounded-lg p-3">
                <div className="text-sm text-gray-400">Win Rate</div>
                <div className="text-xl font-bold text-white">
                  {results.backtestResults.winRate.toFixed(2)}%
                </div>
                <div className="text-xs text-gray-500">
                  {results.backtestResults.successfulTrades} / {results.backtestResults.totalTrades} trades
                </div>
              </div>
              
              <div className="bg-gray-750 rounded-lg p-3">
                <div className="text-sm text-gray-400">Max Drawdown</div>
                <div className="text-xl font-bold text-red-400">
                  {results.backtestResults.maxDrawdown.toFixed(2)}%
                </div>
                <div className="text-xs text-gray-500">
                  Largest drop from peak
                </div>
              </div>
              
              <div className="bg-gray-750 rounded-lg p-3">
                <div className="text-sm text-gray-400">Sharpe Ratio</div>
                <div className="text-xl font-bold text-white">
                  {results.backtestResults.sharpeRatio.toFixed(2)}
                </div>
                <div className="text-xs text-gray-500">
                  Risk-adjusted return
                </div>
              </div>
            </div>
            
            {/* Performance Chart */}
            <div className="bg-gray-750 rounded-lg p-4 mb-6">
              <div className="mb-2 text-sm font-medium text-gray-300">Performance Chart</div>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis 
                      dataKey="date" 
                      tick={{ fill: '#9CA3AF' }}
                      tickLine={{ stroke: '#4B5563' }}
                    />
                    <YAxis 
                      tick={{ fill: '#9CA3AF' }}
                      tickLine={{ stroke: '#4B5563' }}
                      domain={['dataMin', 'dataMax']}
                    />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: '#1F2937',
                        borderColor: '#4B5563',
                        color: '#F9FAFB'
                      }}
                      itemStyle={{ color: '#F9FAFB' }}
                      labelStyle={{ color: '#F9FAFB' }}
                    />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="profit" 
                      stroke="#10B981" 
                      activeDot={{ r: 8 }}
                      name="Portfolio Value"
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
            
            {/* Trade Details (simplified) */}
            <div>
              <div className="flex justify-between items-center mb-2">
                <div className="text-sm font-medium text-gray-300">Trade Details</div>
                <button className="text-xs text-indigo-400 hover:text-indigo-300">Show All</button>
              </div>
              <div className="bg-gray-750 rounded-lg overflow-hidden">
                <table className="min-w-full divide-y divide-gray-700">
                  <thead className="bg-gray-700 bg-opacity-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Date</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Type</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Price</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Amount</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">P&L</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-700">
                    {/* Example trades - this would be real data from the backtest */}
                    <tr>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">2025-04-10</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-400">BUY</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">$105.42</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">0.5 ETH</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">-</td>
                    </tr>
                    <tr>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">2025-04-15</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-red-400">SELL</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">$112.87</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">0.5 ETH</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-400">+$3.73</td>
                    </tr>
                    <tr>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">2025-04-22</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-400">BUY</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">$107.29</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">0.6 ETH</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">-</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

